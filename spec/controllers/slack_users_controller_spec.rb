require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.

RSpec.describe SlackUsersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # SlackUser. As you add validations to SlackUser, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      "id" => 'R8392D1K111',
      "name" => 'tobygu',
      "real_name" => 'Toby Gu',
      "profile" => {
        'team' => 'DJIJIO'
      }
    }
  }

  let(:invalid_attributes) {
    { "name" => 'invalidtoby', "real_name" => 'Bad Toby' }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # SlackUsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "returns a success response" do
      create_user_service = SlackUserService.new(valid_attributes)
      create_user_service.perform
      slack_user = create_user_service.slack_user
      get :index, params: {}, session: valid_session
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      create_user_service = SlackUserService.new(valid_attributes)
      create_user_service.perform
      slack_user = create_user_service.slack_user
      get :show, params: {id: slack_user.id}, session: valid_session
      expect(response).to be_successful
    end
  end


  describe "POST #create" do
    context "with valid params" do
      it "creates a new SlackUser" do
        expect {
          create_user_service = SlackUserService.new(valid_attributes)
          create_user_service.perform
          slack_user = create_user_service.slack_user
        }.to change(SlackUser, :count).by(1)
      end

    end

    # context "with invalid params" do
    #   it "returns a success response (i.e. to display the 'new' template)" do
    #     create_user_service = SlackUserService.new(invalid_attributes)
    #     create_user_service.perform
    #     slack_user = create_user_service.slack_user
    #     expect(response).to be_successful
    #   end
    # end
  end

  describe "PUT #update" do
    # context "with valid params" do
    #   let(:new_attributes) {
    #     skip("Add a hash of attributes valid for your model")
    #   }
    #
    #   it "updates the requested slack_user" do
    #     slack_user = SlackUser.create! valid_attributes
    #     put :update, params: {id: slack_user.to_param, slack_user: new_attributes}, session: valid_session
    #     slack_user.reload
    #     skip("Add assertions for updated state")
    #   end
    #
    #   it "redirects to the slack_user" do
    #     slack_user = SlackUser.create! valid_attributes
    #     put :update, params: {id: slack_user.to_param, slack_user: valid_attributes}, session: valid_session
    #     expect(response).to redirect_to(slack_user)
    #   end
    # end
    #
    # context "with invalid params" do
    #   it "returns a success response (i.e. to display the 'edit' template)" do
    #     slack_user = SlackUser.create! valid_attributes
    #     put :update, params: {id: slack_user.to_param, slack_user: invalid_attributes}, session: valid_session
    #     expect(response).to be_successful
    #   end
    # end
  end

  describe "DELETE #destroy" do
    # DELETE IS NOT IMPLEMENTED - IT IS A FLAG ON RECORD.

    # it "destroys the requested slack_user" do
    #   slack_user = SlackUser.create! valid_attributes
    #   expect {
    #     delete :destroy, params: {id: slack_user.to_param}, session: valid_session
    #   }.to change(SlackUser, :count).by(-1)
    # end
    #
    # it "redirects to the slack_users list" do
    #   slack_user = SlackUser.create! valid_attributes
    #   delete :destroy, params: {id: slack_user.to_param}, session: valid_session
    #   expect(response).to redirect_to(slack_users_url)
    # end
  end

end
